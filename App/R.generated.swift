//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()
  let segue = segue()
  let reuseIdentifier = reuseIdentifier()

  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 10 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `BackgrondColor`.
    var backgrondColor: RswiftResources.ColorResource { .init(name: "BackgrondColor", path: [], bundle: bundle) }

    /// Color `BadColor`.
    var badColor: RswiftResources.ColorResource { .init(name: "BadColor", path: [], bundle: bundle) }

    /// Color `CellColor`.
    var cellColor: RswiftResources.ColorResource { .init(name: "CellColor", path: [], bundle: bundle) }

    /// Color `GoodColor`.
    var goodColor: RswiftResources.ColorResource { .init(name: "GoodColor", path: [], bundle: bundle) }

    /// Color `MediumColor`.
    var mediumColor: RswiftResources.ColorResource { .init(name: "MediumColor", path: [], bundle: bundle) }

    /// Color `PrimaryTextColor`.
    var primaryTextColor: RswiftResources.ColorResource { .init(name: "PrimaryTextColor", path: [], bundle: bundle) }

    /// Color `SecundaryTextColor`.
    var secundaryTextColor: RswiftResources.ColorResource { .init(name: "SecundaryTextColor", path: [], bundle: bundle) }

    /// Color `habitsExerciceColor`.
    var habitsExerciceColor: RswiftResources.ColorResource { .init(name: "habitsExerciceColor", path: [], bundle: bundle) }

    /// Color `habitsFruitsColor`.
    var habitsFruitsColor: RswiftResources.ColorResource { .init(name: "habitsFruitsColor", path: [], bundle: bundle) }

    /// Color `habitsWaterColor`.
    var habitsWaterColor: RswiftResources.ColorResource { .init(name: "habitsWaterColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 18 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `ExerciseIcon`.
    var exerciseIcon: RswiftResources.ImageResource { .init(name: "ExerciseIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ProfileImgPlaceholder`.
    var profileImgPlaceholder: RswiftResources.ImageResource { .init(name: "ProfileImgPlaceholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ProfilePlaceholder`.
    var profilePlaceholder: RswiftResources.ImageResource { .init(name: "ProfilePlaceholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Slide 1`.
    var slide1: RswiftResources.ImageResource { .init(name: "Slide 1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Slide 2`.
    var slide2: RswiftResources.ImageResource { .init(name: "Slide 2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Slide 3`.
    var slide3: RswiftResources.ImageResource { .init(name: "Slide 3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Slide 4`.
    var slide4: RswiftResources.ImageResource { .init(name: "Slide 4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Slide 5`.
    var slide5: RswiftResources.ImageResource { .init(name: "Slide 5", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fruits`.
    var fruits: RswiftResources.ImageResource { .init(name: "fruits", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `habitCycle`.
    var habitCycle: RswiftResources.ImageResource { .init(name: "habitCycle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconLandscape`.
    var iconLandscape: RswiftResources.ImageResource { .init(name: "iconLandscape", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tutorial 1`.
    var tutorial1: RswiftResources.ImageResource { .init(name: "tutorial 1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tutorial 2`.
    var tutorial2: RswiftResources.ImageResource { .init(name: "tutorial 2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tutorial 3`.
    var tutorial3: RswiftResources.ImageResource { .init(name: "tutorial 3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tutorial 4`.
    var tutorial4: RswiftResources.ImageResource { .init(name: "tutorial 4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tutorial 5`.
    var tutorial5: RswiftResources.ImageResource { .init(name: "tutorial 5", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tutorial 6`.
    var tutorial6: RswiftResources.ImageResource { .init(name: "tutorial 6", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `water`.
    var water: RswiftResources.ImageResource { .init(name: "water", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
            var uiSceneStoryboardFile: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneStoryboardFile") ?? "Main" }
          }
        }
      }
    }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    let apsEnvironment: String = "development"
    let comAppleDeveloperIcloudContainerIdentifiers = comAppleDeveloperIcloudContainerIdentifiers()
    let comAppleDeveloperIcloudServices = comAppleDeveloperIcloudServices()
    struct comAppleDeveloperIcloudContainerIdentifiers {
      let iCloudInnovate: String = "iCloud.Innovate"
    }
    struct comAppleDeveloperIcloudServices {
      let cloudKit: String = "CloudKit"
    }
  }

  /// This `_R.segue` struct is generated, and contains static references to 7 view controllers.
  struct segue {
    let addDatedMealViewController = addDatedMealViewController()
    let calendarViewController = calendarViewController()
    let mealHistoryViewController = mealHistoryViewController()
    let mealViewController = mealViewController()
    let notificationSettingsViewController = notificationSettingsViewController()
    let profileViewController = profileViewController()
    let settingsViewController = settingsViewController()

    /// This struct is generated for `AddDatedMealViewController`, and contains static references to 1 segues.
    struct addDatedMealViewController {

      /// Segue identifier `toAboutMeal`.
      var toAboutMeal: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, AddDatedMealViewController, UIKit.UIViewController> { .init(identifier: "toAboutMeal") }
    }

    /// This struct is generated for `CalendarViewController`, and contains static references to 1 segues.
    struct calendarViewController {

      /// Segue identifier `toMealHistory`.
      var toMealHistory: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, CalendarViewController, MealHistoryViewController> { .init(identifier: "toMealHistory") }
    }

    /// This struct is generated for `MealHistoryViewController`, and contains static references to 1 segues.
    struct mealHistoryViewController {

      /// Segue identifier `toRegisterMeal`.
      var toRegisterMeal: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, MealHistoryViewController, AddDatedMealViewController> { .init(identifier: "toRegisterMeal") }
    }

    /// This struct is generated for `MealViewController`, and contains static references to 2 segues.
    struct mealViewController {

      /// Segue identifier `toAboutMeal`.
      var toAboutMeal: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, MealViewController, UIKit.UIViewController> { .init(identifier: "toAboutMeal") }

      /// Segue identifier `toNoteModal`.
      var toNoteModal: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, MealViewController, AddNoteViewController> { .init(identifier: "toNoteModal") }
    }

    /// This struct is generated for `NotificationSettingsViewController`, and contains static references to 1 segues.
    struct notificationSettingsViewController {

      /// Segue identifier `toNotificationDetails`.
      var toNotificationDetails: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, NotificationSettingsViewController, NotificationDetailsViewController> { .init(identifier: "toNotificationDetails") }
    }

    /// This struct is generated for `ProfileViewController`, and contains static references to 1 segues.
    struct profileViewController {

      /// Segue identifier `toEditData`.
      var toEditData: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, ProfileViewController, EditDataViewController> { .init(identifier: "toEditData") }
    }

    /// This struct is generated for `SettingsViewController`, and contains static references to 5 segues.
    struct settingsViewController {

      /// Segue identifier `toAboutMeal`.
      var toAboutMeal: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, UIKit.UIViewController> { .init(identifier: "toAboutMeal") }

      /// Segue identifier `toCredits`.
      var toCredits: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, HowToUseViewController> { .init(identifier: "toCredits") }

      /// Segue identifier `toHowToUse`.
      var toHowToUse: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, HowToUseViewController> { .init(identifier: "toHowToUse") }

      /// Segue identifier `toMealHistory`.
      var toMealHistory: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, MealHistoryViewController> { .init(identifier: "toMealHistory") }

      /// Segue identifier `toNotificationSettings`.
      var toNotificationSettings: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, NotificationSettingsViewController> { .init(identifier: "toNotificationSettings") }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `DailyHabitsView`.
    var dailyHabitsView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "DailyHabitsView", bundle: bundle) }

    /// Nib `GroupedHabitsView`.
    var groupedHabitsView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GroupedHabitsView", bundle: bundle) }

    /// Nib `LineChartTableViewCell`.
    var lineChartTableViewCell: RswiftResources.NibReferenceReuseIdentifier<LineChartTableViewCell, LineChartTableViewCell> { .init(name: "LineChartTableViewCell", bundle: bundle, identifier: "LineChartTableViewCell") }

    /// Nib `MealHistoryHeader`.
    var mealHistoryHeader: RswiftResources.NibReference<MealHistoryHeader> { .init(name: "MealHistoryHeader", bundle: bundle) }

    /// Nib `MealHistoryTableViewCell`.
    var mealHistoryTableViewCell: RswiftResources.NibReferenceReuseIdentifier<MealHistoryTableViewCell, MealHistoryTableViewCell> { .init(name: "MealHistoryTableViewCell", bundle: bundle, identifier: "MealHistoryTableViewCell") }

    /// Nib `NotificationSettingsCell`.
    var notificationSettingsCell: RswiftResources.NibReferenceReuseIdentifier<NotificationSettingsCell, NotificationSettingsCell> { .init(name: "NotificationSettingsCell", bundle: bundle, identifier: "NotificationSettingsCell") }

    /// Nib `PerformanceChartDotView`.
    var performanceChartDotView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PerformanceChartDotView", bundle: bundle) }

    /// Nib `RatingView`.
    var ratingView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "RatingView", bundle: bundle) }

    /// Nib `RegisterMealView`.
    var registerMealView: RswiftResources.NibReference<RoundedView> { .init(name: "RegisterMealView", bundle: bundle) }

    /// Nib `SingleHabitView`.
    var singleHabitView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SingleHabitView", bundle: bundle) }

    func validate() throws {
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in nib 'MealHistoryHeader', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "BadColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BadColor' is used in nib 'PerformanceChartDotView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "CellColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'CellColor' is used in nib 'PerformanceChartDotView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BadColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BadColor' is used in nib 'RatingView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "GoodColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'GoodColor' is used in nib 'RatingView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "MediumColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'MediumColor' is used in nib 'RatingView', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "info.circle") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'info.circle' is used in nib 'RegisterMealView', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.and.pencil") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'square.and.pencil' is used in nib 'RegisterMealView', but couldn't be loaded.") } }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 7 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `cellId`.
    let cellId: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "cellId")

    /// Reuse identifier `dateCell`.
    let dateCell: RswiftResources.ReuseIdentifier<DateCell> = .init(identifier: "dateCell")

    /// Reuse identifier `DateHeader`.
    let dateHeader: RswiftResources.ReuseIdentifier<DateHeader> = .init(identifier: "DateHeader")

    /// Reuse identifier `LineChartTableViewCell`.
    let lineChartTableViewCell: RswiftResources.ReuseIdentifier<LineChartTableViewCell> = .init(identifier: "LineChartTableViewCell")

    /// Reuse identifier `MealHistoryTableViewCell`.
    let mealHistoryTableViewCell: RswiftResources.ReuseIdentifier<MealHistoryTableViewCell> = .init(identifier: "MealHistoryTableViewCell")

    /// Reuse identifier `NotificationSettingsCell`.
    let notificationSettingsCell: RswiftResources.ReuseIdentifier<NotificationSettingsCell> = .init(identifier: "NotificationSettingsCell")

    /// Reuse identifier `PerformanceChart`.
    let performanceChart: RswiftResources.ReuseIdentifier<My_Way.PerformanceChartCollectionViewCell> = .init(identifier: "PerformanceChart")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var calendar: calendar { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var mealHistory: mealHistory { .init(bundle: bundle) }
    var meals: meals { .init(bundle: bundle) }
    var profile: profile { .init(bundle: bundle) }
    var settings: settings { .init(bundle: bundle) }

    func calendar(bundle: Foundation.Bundle) -> calendar {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func mealHistory(bundle: Foundation.Bundle) -> mealHistory {
      .init(bundle: bundle)
    }
    func meals(bundle: Foundation.Bundle) -> meals {
      .init(bundle: bundle)
    }
    func profile(bundle: Foundation.Bundle) -> profile {
      .init(bundle: bundle)
    }
    func settings(bundle: Foundation.Bundle) -> settings {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.calendar.validate()
      try self.launchScreen.validate()
      try self.main.validate()
      try self.mealHistory.validate()
      try self.meals.validate()
      try self.profile.validate()
      try self.settings.validate()
    }


    /// Storyboard `Calendar`.
    struct calendar: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Calendar"

      var calendarStoryboard: RswiftResources.StoryboardViewControllerIdentifier<CalendarViewController> { .init(identifier: "Calendar Storyboard", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "calendar") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'calendar' is used in storyboard 'Calendar', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "BadColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BadColor' is used in storyboard 'Calendar', but couldn't be loaded.") }
        if UIKit.UIColor(named: "SecundaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'SecundaryTextColor' is used in storyboard 'Calendar', but couldn't be loaded.") }
        if UIKit.UIColor(named: "rateRedColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'rateRedColor' is used in storyboard 'Calendar', but couldn't be loaded.") }
        if calendarStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'calendarStoryboard' could not be loaded from storyboard 'Calendar' as 'CalendarViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "iconLandscape", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconLandscape' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UITabBarController

      let bundle: Foundation.Bundle

      let name = "Main"

      var tutorial: RswiftResources.StoryboardViewControllerIdentifier<TutorialViewController> { .init(identifier: "Tutorial", storyboard: name, bundle: bundle) }

      func validate() throws {
        if tutorial() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'tutorial' could not be loaded from storyboard 'Main' as 'TutorialViewController'.") }
      }
    }

    /// Storyboard `MealHistory`.
    struct mealHistory: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = MealHistoryViewController

      let bundle: Foundation.Bundle

      let name = "MealHistory"
      func validate() throws {

      }
    }

    /// Storyboard `Meals`.
    struct meals: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Meals"

      var addNoteViewController: RswiftResources.StoryboardViewControllerIdentifier<AddNoteViewController> { .init(identifier: "AddNoteViewController", storyboard: name, bundle: bundle) }
      var mealNavigationViewController: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "MealNavigationViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus.app.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus.app.fill' is used in storyboard 'Meals', but couldn't be loaded.") } }
        if addNoteViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'addNoteViewController' could not be loaded from storyboard 'Meals' as 'AddNoteViewController'.") }
        if mealNavigationViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mealNavigationViewController' could not be loaded from storyboard 'Meals' as 'UIKit.UINavigationController'.") }
      }
    }

    /// Storyboard `Profile`.
    struct profile: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ProfileViewController

      let bundle: Foundation.Bundle

      let name = "Profile"
      func validate() throws {
        if UIKit.UIImage(named: "ExerciseIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ExerciseIcon' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ProfileImgPlaceholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ProfileImgPlaceholder' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fruits", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fruits' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'person.fill' is used in storyboard 'Profile', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in storyboard 'Profile', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "water", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'water' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgrondColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgrondColor' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIColor(named: "CellColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'CellColor' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIColor(named: "PrimaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'PrimaryTextColor' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIColor(named: "SecundaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'SecundaryTextColor' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIColor(named: "rateGreenColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'rateGreenColor' is used in storyboard 'Profile', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Settings`.
    struct settings: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Settings"

      var aboutMeal: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UIViewController> { .init(identifier: "aboutMeal", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "gear") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'gear' is used in storyboard 'Settings', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "habitCycle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'habitCycle' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial 1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tutorial 1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial 2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tutorial 2' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial 3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tutorial 3' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial 4", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tutorial 4' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial 5", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tutorial 5' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial 6", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tutorial 6' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgrondColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgrondColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BadColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BadColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "GoodColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'GoodColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "MediumColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'MediumColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "PrimaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'PrimaryTextColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        if aboutMeal() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'aboutMeal' could not be loaded from storyboard 'Settings' as 'UIKit.UIViewController'.") }
      }
    }
  }
}